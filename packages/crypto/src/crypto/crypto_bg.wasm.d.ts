/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function rng_generate_bytes(a: number, b: number): void;
export function __wbg_rng_free(a: number): void;
export function __wbg_salt_free(a: number): void;
export function salt_new(a: number, b: number, c: number): void;
export function salt_generate(): number;
export function salt_to_bytes(a: number, b: number): void;
export function salt_as_string(a: number, b: number): void;
export function __wbg_extspendingkey_free(a: number): void;
export function __wbg_extfullviewingkey_free(a: number): void;
export function __wbg_extendedkeys_free(a: number): void;
export function extendedkeys_xsk(a: number): number;
export function extendedkeys_xfvk(a: number): number;
export function __wbg_serialized_free(a: number): void;
export function serialized_payment_address(a: number, b: number): void;
export function serialized_xsk(a: number, b: number): void;
export function serialized_xfvk(a: number, b: number): void;
export function shieldedhdwallet_new(a: number, b: number): void;
export function shieldedhdwallet_derive_to_serialized_keys(a: number, b: number, c: number): void;
export function __wbg_shieldedhdwallet_free(a: number): void;
export function __wbg_vecu8pointer_free(a: number): void;
export function vecu8pointer_clone(a: number): number;
export function __wbg_stringpointer_free(a: number): void;
export function __wbg_get_stringpointer_pointer(a: number): number;
export function __wbg_set_stringpointer_pointer(a: number, b: number): void;
export function __wbg_get_stringpointer_length(a: number): number;
export function __wbg_set_stringpointer_length(a: number, b: number): void;
export function stringpointer_new(a: number, b: number): number;
export function stringpointer_clone(a: number): number;
export function __wbg_vecstringpointer_free(a: number): void;
export function vecstringpointer_pointers(a: number, b: number): void;
export function vecstringpointer_lengths(a: number, b: number): void;
export function __wbg_set_vecu8pointer_length(a: number, b: number): void;
export function __wbg_get_vecu8pointer_pointer(a: number): number;
export function __wbg_get_vecu8pointer_length(a: number): number;
export function __wbg_set_vecu8pointer_pointer(a: number, b: number): void;
export function vecu8pointer_new(a: number, b: number): number;
export function __wbg_argon2params_free(a: number): void;
export function argon2params_new(a: number, b: number, c: number): number;
export function argon2params_m_cost(a: number): number;
export function argon2params_t_cost(a: number): number;
export function argon2params_p_cost(a: number): number;
export function __wbg_argon2_free(a: number): void;
export function argon2_new(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function argon2_to_hash(a: number, b: number): void;
export function argon2_verify(a: number, b: number, c: number, d: number): void;
export function argon2_params(a: number): number;
export function argon2_key(a: number, b: number): void;
export function __wbg_key_free(a: number): void;
export function key_new(a: number, b: number, c: number): void;
export function key_to_bytes(a: number, b: number): void;
export function key_to_hex(a: number): number;
export function __wbg_hdwallet_free(a: number): void;
export function hdwallet_new(a: number, b: number): void;
export function hdwallet_derive(a: number, b: number, c: number, d: number): void;
export function __wbg_mnemonic_free(a: number): void;
export function mnemonic_new(a: number): number;
export function mnemonic_validate(a: number, b: number): number;
export function mnemonic_from_phrase(a: number, b: number, c: number): void;
export function mnemonic_to_seed(a: number, b: number, c: number): void;
export function mnemonic_to_words(a: number, b: number): void;
export function mnemonic_phrase(a: number, b: number): void;
export function __wbg_aes_free(a: number): void;
export function aes_new(a: number, b: number, c: number, d: number): void;
export function aes_encrypt(a: number, b: number, c: number, d: number): void;
export function aes_decrypt(a: number, b: number, c: number, d: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export function __wbindgen_exn_store(a: number): void;
